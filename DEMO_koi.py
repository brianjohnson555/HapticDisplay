#!/usr/bin/env python3

"""This demo script simultaneously displays the koi fish video will writing haptic output
to the haptic display via USB. Both the video and haptic output will loop continuously
until the user presses the 'B' keyboard key.

To run, it requires both the input video and the output.txt file generated by the
visual-haptic algorithm preprocessing code."""

###### USER SETTINGS ######
FILENAME = "algo_input_data/datakoi_output.txt"
VIDEONAME = "algo_input_videos/video_koi.mp4"
SERIAL_ACTIVE = False # if False, just runs the algorithm without sending to HV switches
COM_A = "COM9" # port for MINI switches 1-10
COM_B = "COM15" # port for MINI switches 11-20
COM_C = "COM16" # port for MINI swiches 21-28

###### INITIALIZATIONS ######
import cv2
import time
import haptic_utils.haptic_map as haptic_map # my custom file
import haptic_utils.USB as USB # my custom file
from numpy import genfromtxt

###### MAIN ######
# Load data
data=genfromtxt(FILENAME,delimiter=',')[:,0:28]
data_length = data.shape[0]
frame_rate = 120

# Set up USBWriter and intensity map:
serial_ports = [COM_A, COM_B, COM_C]
serial_writer = USB.SerialWriter(serial_ports, serial_active=SERIAL_ACTIVE)

# Preprocess data:
output_data = haptic_map.make_output_data(data,
                                        freq_range=(0,24),
                                        duty_range=(0.1,0.5))

# Preprocess video:
video_data = []
cap = cv2.VideoCapture(VIDEONAME)
while True:
    ret,img = cap.read()
    if ret:
        video_data.append(img)
    else:
        break
video_data.reverse()

# Enable HV!!!
serial_writer.HV_enable()

while True:
    isClose=False # break condition
    video_sequence = video_data.copy()
    packet_sequence = output_data.packet_sequence.copy() # copy packet sequence
    while True:
        if len(packet_sequence)>0 and len(video_sequence)>0: # if frame exists, run; otherwise, video is finished->loop back to beginning
            t_start = time.time()
            # send to USB:
            packets = packet_sequence.pop()
            serial_writer.write_packets_to_USB(packets)
            # Display video:
            img = video_sequence.pop()
            cv2.namedWindow('Video',cv2.WINDOW_KEEPRATIO)
            cv2.imshow('Video',img)
            # get elapsed time:
            t_end=time.time()
            t_elapsed = t_end-t_start
            # maintain constant loop frame rate:
            if t_elapsed<1/frame_rate:
                time.sleep(1/frame_rate-(t_elapsed)) 

            if(cv2.waitKey(10) & 0xFF == ord('b')): # BREAK OUT OF LOOP WHEN "b" KEY IS PRESSED!
                isClose = True # assign stop flag
                break
        else: 
            break # video is finished, break and reset frame count

    if isClose: 
        break # user pressed 'b', stop script
    
# Disable HV!!!
serial_writer.HV_disable()
time.sleep(0.5)
